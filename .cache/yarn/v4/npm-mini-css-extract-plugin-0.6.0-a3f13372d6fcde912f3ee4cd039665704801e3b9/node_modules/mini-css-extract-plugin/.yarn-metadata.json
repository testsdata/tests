{
  "manifest": {
    "name": "mini-css-extract-plugin",
    "version": "0.6.0",
    "description": "extracts CSS into separate files",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/mini-css-extract-plugin.git"
    },
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "homepage": "https://github.com/webpack-contrib/mini-css-extract-plugin",
    "bugs": {
      "url": "https://github.com/webpack-contrib/mini-css-extract-plugin/issues"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 6.9.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --ignore 'src/**/*.test.js' --copy-files",
      "postbuild": "es-check es5 dist/hmr/hotModuleReplacement.js",
      "clean": "del-cli dist",
      "commitlint": "commitlint --from=master",
      "lint": "eslint --cache src test",
      "prepublish": "npm run build",
      "release": "standard-version",
      "security": "npm audit",
      "test:only": "jest",
      "test:watch": "jest --watch",
      "test:coverage": "jest --collectCoverageFrom='src/**/*.js' --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:only",
      "ci:lint": "npm run lint && npm run security",
      "ci:test": "npm run test:only -- --runInBand",
      "ci:coverage": "npm run test:coverage -- --runInBand",
      "ci:lint:commits": "commitlint --from=origin/master --to=${CIRCLE_SHA1}",
      "defaults": "webpack-defaults"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "webpack": "^4.4.0"
    },
    "dependencies": {
      "loader-utils": "^1.1.0",
      "normalize-url": "^2.0.1",
      "schema-utils": "^1.0.0",
      "webpack-sources": "^1.1.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.4.3",
      "@babel/core": "^7.4.3",
      "@babel/preset-env": "^7.4.3",
      "@commitlint/cli": "^7.5.2",
      "@commitlint/config-conventional": "^7.5.0",
      "@webpack-contrib/defaults": "^3.1.1",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "acorn": "^6.1.1",
      "babel-eslint": "^10.0.1",
      "babel-jest": "^24.7.1",
      "cross-env": "^5.1.3",
      "css-loader": "^2.1.1",
      "del": "^4.1.0",
      "del-cli": "^1.1.0",
      "es-check": "^5.0.0",
      "eslint": "^5.16.0",
      "eslint-plugin-import": "^2.16.0",
      "eslint-plugin-prettier": "^3.0.1",
      "file-loader": "^3.0.1",
      "husky": "^1.3.1",
      "jest": "^24.7.1",
      "lint-staged": "^8.1.5",
      "memory-fs": "^0.4.1",
      "pre-commit": "^1.2.2",
      "prettier": "^1.16.4",
      "standard-version": "^5.0.2",
      "webpack": "4.29.0",
      "webpack-cli": "^3.3.0",
      "webpack-dev-server": "^3.3.1"
    },
    "keywords": [
      "webpack",
      "css",
      "extract",
      "hmr"
    ],
    "babel": {
      "presets": [
        [
          "@babel/preset-env",
          {
            "targets": {
              "node": "6.9.0"
            }
          }
        ]
      ]
    },
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged",
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
      }
    },
    "lint-staged": {
      "*.js": [
        "eslint --fix",
        "git add"
      ]
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "prettier": {
      "singleQuote": true,
      "trailingComma": "es5",
      "arrowParens": "always"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v4/npm-mini-css-extract-plugin-0.6.0-a3f13372d6fcde912f3ee4cd039665704801e3b9/node_modules/mini-css-extract-plugin/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <!-- replace with accurate logo e.g from https://worldvectorlogo.com/ -->\n  <img width=\"200\" height=\"200\" src=\"https://cdn.worldvectorlogo.com/logos/javascript.svg\">\n  <a href=\"https://webpack.js.org/\">\n    <img width=\"200\" height=\"200\" vspace=\"\" hspace=\"25\" src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon-square-big.svg\">\n  </a>\n  <h1>mini-css-extract-plugin</h1>\n</div>\n\n[![npm][npm]][npm-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\nThis plugin extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.\n\nIt builds on top of a new webpack v4 feature (module types) and requires webpack 4 to work.\n\nCompared to the extract-text-webpack-plugin:\n\n- Async loading\n- No duplicate compilation (performance)\n- Easier to use\n- Specific to CSS\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm install --save-dev mini-css-extract-plugin\n```\n\n<h2 align=\"center\">Usage</h2>\n\n### Configuration\n\n#### `publicPath`\n\nType: `String|Function`\nDefault: the `publicPath` in `webpackOptions.output`\n\nSpecifies a custom public path for the target file(s).\n\n#### Minimal example\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              // you can specify a publicPath here\n              // by default it uses publicPath in webpackOptions.output\n              publicPath: '../',\n              hmr: process.env.NODE_ENV === 'development',\n            },\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `publicPath` function example\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              publicPath: (resourcePath, context) => {\n                // publicPath is the relative path of the resource to the context\n                // e.g. for ./css/admin/main.css the publicPath will be ../../\n                // while for ./css/main.css the publicPath will be ../\n                return path.relative(path.dirname(resourcePath), context) + '/';\n              },\n            },\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### Advanced configuration example\n\nThis plugin should be used only on `production` builds without `style-loader` in the loaders chain, especially if you want to have HMR in `development`.\n\nHere is an example to have both HMR in `development` and your styles extracted in a file for `production` builds.\n\n(Loaders options left out for clarity, adapt accordingly to your needs.)\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst devMode = process.env.NODE_ENV !== 'production';\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: devMode ? '[name].css' : '[name].[hash].css',\n      chunkFilename: devMode ? '[id].css' : '[id].[hash].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              hmr: process.env.NODE_ENV === 'development',\n            },\n          },\n          'css-loader',\n          'postcss-loader',\n          'sass-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### Hot Module Reloading (HMR)\n\nextract-mini-css-plugin supports hot reloading of actual css files in development. Some options are provided to enable HMR of both standard stylesheets and locally scoped CSS or CSS modules. Below is an example configuration of mini-css for HMR use with CSS modules.\n\nWhile we attempt to hmr css-modules. It is not easy to perform when code-splitting with custom chunk names. `reloadAll` is an option that should only be enabled if HMR isn't working correctly. The core challenge with css-modules is that when code-split, the chunk ids can and do end up different compared to the filename.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              // only enable hot in development\n              hmr: process.env.NODE_ENV === 'development',\n              // if hmr does not work, this is a forceful method.\n              reloadAll: true,\n            },\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Minimizing For Production\n\nTo minify the output, use a plugin like [optimize-css-assets-webpack-plugin](https://github.com/NMFR/optimize-css-assets-webpack-plugin). Setting `optimization.minimizer` overrides the defaults provided by webpack, so make sure to also specify a JS minimizer:\n\n**webpack.config.js**\n\n```js\nconst TerserJSPlugin = require('terser-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nmodule.exports = {\n  optimization: {\n    minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n### Features\n\n#### Using preloaded or inlined CSS\n\nThe runtime code detects already added CSS via `<link>` or `<style>` tag.\nThis can be useful when injecting CSS on server-side for Server-Side-Rendering.\nThe `href` of the `<link>` tag has to match the URL that will be used for loading the CSS chunk.\nThe `data-href` attribute can be used for `<link>` and `<style>` too.\nWhen inlining CSS `data-href` must be used.\n\n#### Extracting all CSS in a single file\n\nSimilar to what [extract-text-webpack-plugin](https://github.com/webpack-contrib/extract-text-webpack-plugin) does, the CSS\ncan be extracted in one CSS file using `optimization.splitChunks.cacheGroups`.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        styles: {\n          name: 'styles',\n          test: /\\.css$/,\n          chunks: 'all',\n          enforce: true,\n        },\n      },\n    },\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n#### Extracting CSS based on entry\n\nYou may also extract the CSS based on the webpack entry name. This is especially useful if you import routes dynamically\nbut want to keep your CSS bundled according to entry. This also prevents the CSS duplication issue one had with the\nExtractTextPlugin.\n\n```javascript\nconst path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nfunction recursiveIssuer(m) {\n  if (m.issuer) {\n    return recursiveIssuer(m.issuer);\n  } else if (m.name) {\n    return m.name;\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = {\n  entry: {\n    foo: path.resolve(__dirname, 'src/foo'),\n    bar: path.resolve(__dirname, 'src/bar'),\n  },\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        fooStyles: {\n          name: 'foo',\n          test: (m, c, entry = 'foo') =>\n            m.constructor.name === 'CssModule' && recursiveIssuer(m) === entry,\n          chunks: 'all',\n          enforce: true,\n        },\n        barStyles: {\n          name: 'bar',\n          test: (m, c, entry = 'bar') =>\n            m.constructor.name === 'CssModule' && recursiveIssuer(m) === entry,\n          chunks: 'all',\n          enforce: true,\n        },\n      },\n    },\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n#### Long Term Caching\n\nFor long term caching use `filename: \"[contenthash].css\"`. Optionally add `[name]`.\n\n### Remove Order Warnings\n\nIf the terminal is getting bloated with chunk order warnings. You can filter by configuring [warningsFilter](https://webpack.js.org/configuration/stats/) withing the webpack stats option\n\n### Media Query Plugin\n\nIf you'd like to extract the media queries from the extracted CSS (so mobile users don't need to load desktop or tablet specific CSS anymore) you should use one of the following plugins:\n\n- [Media Query Plugin](https://github.com/SassNinja/media-query-plugin)\n- [Media Query Splitting Plugin](https://github.com/mike-diamond/media-query-splitting-plugin)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/mini-css-extract-plugin.svg\n[npm-url]: https://npmjs.com/package/mini-css-extract-plugin\n[node]: https://img.shields.io/node/v/mini-css-extract-plugin.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/mini-css-extract-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/mini-css-extract-plugin\n[tests]: https://img.shields.io/circleci/project/github/webpack-contrib/mini-css-extract-plugin.svg\n[tests-url]: https://circleci.com/gh/webpack-contrib/mini-css-extract-plugin\n[cover]: https://codecov.io/gh/webpack-contrib/mini-css-extract-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/mini-css-extract-plugin\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mini-css-extract-plugin/-/mini-css-extract-plugin-0.6.0.tgz#a3f13372d6fcde912f3ee4cd039665704801e3b9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mini-css-extract-plugin/-/mini-css-extract-plugin-0.6.0.tgz",
    "hash": "a3f13372d6fcde912f3ee4cd039665704801e3b9",
    "integrity": "sha512-79q5P7YGI6rdnVyIAV4NXpBQJFWdkzJxCim3Kog4078fM0piAaFlwocqbejdWtLW1cEzCexPrh6EdyFsPgVdAw==",
    "registry": "npm",
    "packageName": "mini-css-extract-plugin"
  },
  "registry": "npm",
  "hash": "a3f13372d6fcde912f3ee4cd039665704801e3b9"
}