// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { style } from 'typestyle/lib';
/**
 * styles for centering node inside of containers
 */
const containerCSSCenter = {
    alignItems: 'center',
    display: 'flex'
};
const iconCSSCenter = {
    display: 'block',
    margin: '0 auto',
    width: '100%'
};
/**
 * icon kind specific styles
 */
const iconCSSBreadCrumb = {
    borderRadius: 'var(--jp-border-radius)',
    cursor: 'pointer',
    margin: '0px 2px',
    padding: '0px 2px',
    height: '16px',
    width: '16px',
    verticalAlign: 'middle',
    // `&` will be substituted for the generated classname (interpolation)
    $nest: {
        '&:hover': {
            backgroundColor: 'var(--jp-layout-color2)'
        },
        '&:first-child': {
            marginLeft: '0px'
        },
        ['.jp-mod-dropTarget&']: {
            backgroundColor: 'var(--jp-brand-color2)',
            opacity: 0.7
        }
    }
};
const iconCSSDockPanelBar = {
    height: '14px',
    width: '14px'
};
const iconCSSLauncherCard = {
    height: 'var(--jp-private-launcher-large-icon-size)',
    width: 'var(--jp-private-launcher-large-icon-size)'
};
const iconCSSLauncherSection = {
    marginRight: '12px',
    height: 'var(--jp-private-launcher-small-icon-size)',
    width: 'var(--jp-private-launcher-small-icon-size)'
};
const iconCSSListing = {
    height: '16px',
    width: '16px'
};
const iconCSSSettingsEditor = {
    height: '16px',
    width: '16px'
};
const iconCSSSideBar = {
    width: '20px'
};
const iconCSSSplash = {
    width: '100px'
};
const iconCSSStatusBar = {
    left: '0px',
    top: '0px',
    height: '18px',
    width: '20px',
    position: 'relative'
};
const iconCSSTabManager = {
    height: '16px',
    width: '16px'
};
const iconCSSToolbarButton = {
    height: '16px',
    width: '16px'
};
const iconCSSKind = {
    breadCrumb: iconCSSBreadCrumb,
    dockPanelBar: iconCSSDockPanelBar,
    launcherCard: iconCSSLauncherCard,
    launcherSection: iconCSSLauncherSection,
    listing: iconCSSListing,
    settingsEditor: iconCSSSettingsEditor,
    sideBar: iconCSSSideBar,
    splash: iconCSSSplash,
    statusBar: iconCSSStatusBar,
    tabManager: iconCSSTabManager,
    toolbarButton: iconCSSToolbarButton,
    unset: {}
};
/**
 * container kind specific styles
 */
const containerCSSDockPanelBar = {
    marginRight: '4px'
};
const containerCSSLauncherCard = {
    height: 'var(--jp-private-launcher-card-icon-height)'
};
const containerCSSListing = {
    flex: '0 0 20px',
    marginRight: '4px',
    position: 'relative'
};
const containerCSSSettingsEditor = {
    display: 'inline-block',
    flex: '0 0 20px',
    marginLeft: '2px',
    marginRight: '1px',
    position: 'relative',
    height: '20px',
    width: '20px'
};
const containerCSSSideBar = {
    // `&` will be substituted for the generated classname (interpolation)
    $nest: {
        // left sidebar tab divs
        '.jp-SideBar.jp-mod-left .p-TabBar-tab &': {
            transform: 'rotate(90deg)'
        },
        // left sidebar currently selected tab div
        '.jp-SideBar.jp-mod-left .p-TabBar-tab.p-mod-current &': {
            transform: 'rotate(90deg)\n' +
                '    translate(\n' +
                '      calc(-0.5 * var(--jp-border-width)),\n' +
                '      calc(-0.5 * var(--jp-border-width))\n' +
                '    )'
        },
        // right sidebar tab divs
        '.jp-SideBar.jp-mod-right .p-TabBar-tab &': {
            transform: 'rotate(-90deg)'
        },
        // right sidebar currently selected tab div
        '.jp-SideBar.jp-mod-right .p-TabBar-tab.p-mod-current &': {
            transform: 'rotate(-90deg)\n' +
                '    translate(\n' +
                '      calc(0.5 * var(--jp-border-width)),\n' +
                '      calc(-0.5 * var(--jp-border-width))\n' +
                '    )'
        }
    }
};
const containerCSSSplash = {
    animation: '0.3s fade-in linear forwards',
    height: '100%',
    width: '100%',
    zIndex: 1
};
const containerCSSTabManager = {
    marginRight: '2px',
    position: 'relative'
};
const containerCSSToolbarButton = {
    display: 'inline-block',
    margin: 'auto',
    verticalAlign: 'middle'
};
const containerCSSKind = {
    breadCrumb: {},
    dockPanelBar: containerCSSDockPanelBar,
    launcherCard: containerCSSLauncherCard,
    launcherSection: {},
    listing: containerCSSListing,
    settingsEditor: containerCSSSettingsEditor,
    sideBar: containerCSSSideBar,
    splash: containerCSSSplash,
    statusBar: {},
    tabManager: containerCSSTabManager,
    toolbarButton: containerCSSToolbarButton,
    unset: {}
};
/**
 * for putting together the icon kind style with any user input styling,
 * as well as styling from optional flags like `center`
 */
function iconCSS(props) {
    const { kind, center } = props, propsCSS = __rest(props, ["kind", "center"]);
    return Object.assign({}, (center ? iconCSSCenter : {}), (kind ? iconCSSKind[kind] : {}), propsCSS);
}
/**
 * for putting together the container kind style with any
 * styling from optional flags like `center`
 */
function containerCSS(props) {
    const { kind, center } = props;
    return Object.assign({}, (center ? containerCSSCenter : {}), (kind ? containerCSSKind[kind] : {}));
}
/**
 * for setting the style on the container of an svg node representing an icon
 */
export const iconStyle = (props) => {
    const conCSS = containerCSS(props);
    return style(Object.assign({}, conCSS, { $nest: Object.assign({}, conCSS.$nest, { ['svg']: iconCSS(props) }) }));
};
/**
 * for setting the style directly on the svg node representing an icon
 */
export const iconStyleFlat = (props) => {
    return style(iconCSS(props));
};
//# sourceMappingURL=icon.js.map