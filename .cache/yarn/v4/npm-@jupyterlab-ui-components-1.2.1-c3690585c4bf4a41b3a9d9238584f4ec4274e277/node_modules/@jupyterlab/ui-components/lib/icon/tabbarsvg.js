import { h } from '@phosphor/virtualdom';
import { DockPanel, TabBar } from '@phosphor/widgets';
import { defaultIconRegistry } from './iconregistry';
/**
 * A widget which displays titles as a single row or column of tabs. Tweaked
 * to enable the use of inline svgs as tab icons.
 */
export class TabBarSvg extends TabBar {
    /**
     * Construct a new tab bar. Sets the (icon) kind and overrides
     * the default renderer.
     *
     * @param options - The options for initializing the tab bar.
     */
    constructor(options) {
        options.renderer = options.renderer || TabBarSvg.defaultRenderer;
        super(options);
        this._kind = options.kind;
    }
    /**
     * A message handler invoked on an `'update-request'` message. Adds svg
     * nodes to icon nodes as appropriate
     */
    onUpdateRequest(msg) {
        super.onUpdateRequest(msg);
        for (let itab in this.contentNode.children) {
            let tab = this.contentNode.children[itab];
            let title = this.titles[itab];
            let iconNode = tab.children ? tab.children[0] : null;
            if (iconNode) {
                // add the svg node, if not already present
                defaultIconRegistry.icon({
                    name: title.iconClass,
                    className: '',
                    title: title.iconLabel,
                    container: iconNode,
                    center: true,
                    kind: this._kind
                });
            }
        }
    }
}
(function (TabBarSvg) {
    /**
     * A modified implementation of the TabBar Renderer.
     */
    class Renderer extends TabBar.Renderer {
        /**
         * Render the icon element for a tab. This version avoids clobbering
         * the icon node's children.
         *
         * @param data - The data to use for rendering the tab.
         *
         * @returns A virtual element representing the tab icon.
         */
        renderIcon(data) {
            let className = this.createIconClass(data);
            return h.div({ className });
        }
    }
    TabBarSvg.Renderer = Renderer;
    TabBarSvg.defaultRenderer = new Renderer();
})(TabBarSvg || (TabBarSvg = {}));
/**
 * A widget which provides a flexible docking area for widgets.Tweaked
 * to enable the use of inline svgs as tab icons.
 */
export class DockPanelSvg extends DockPanel {
    /**
     * Construct a new dock panel. Overrides the default renderer
     * and sets the (icon) kind
     *
     * @param options - The options for initializing the panel.
     */
    constructor(options) {
        if (!options.renderer) {
            options.renderer = new DockPanelSvg.Renderer(options.kind);
        }
        super(options);
    }
}
(function (DockPanelSvg) {
    /**
     * A modified implementation of the DockPanel Renderer.
     */
    class Renderer extends DockPanel.Renderer {
        constructor(kind) {
            super();
            this._kind = kind;
        }
        /**
         * Create a new tab bar (with inline svg icons enabled
         * for use with a dock panel.
         *
         * @returns A new tab bar for a dock panel.
         */
        createTabBar() {
            let bar = new TabBarSvg({
                kind: this._kind
            });
            bar.addClass('p-DockPanel-tabBar');
            return bar;
        }
    }
    DockPanelSvg.Renderer = Renderer;
})(DockPanelSvg || (DockPanelSvg = {}));
//# sourceMappingURL=tabbarsvg.js.map